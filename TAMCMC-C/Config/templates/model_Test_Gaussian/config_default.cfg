#---------------------------------------
# Configuration File for the TAMCMC-C++
#---------------------------------------


!MALA:
	# Variables that control the Metropolis-Hasting and Truncated Langevin scheme
	# algorithm, the adaptive process of the proposal law and the parallel tempering
	
	# ----------- Controls for the Adaptive process -----------
	target_acceptance=0.234;
	c0=10;  Relaxation constrain. Important: Adjust empirically. Guideline: Large dimensionality requires c0~2. Small dimensionality requires c0~5-10
	epsilon1=1e-10;  Bundary for the Robins-Monroe stochastic algorithm. Must be as small as the numerical precision of the machine. With long double, can THEORITICALLY be 1e-19 (1e-16 for double)
	epsilon2=1e-10;
	A1=1e14;  Bundary for the Robins-Monroe stochastic algorithm. Must be as large as the numerical precision of the machine allows.
	# Define zones where Learning is made in different ways
	Nt_learn= 100, 1000, 100000;   DO NOT LEARN BELLOW THE FIRST VALUE OR AFTER THE LAST VALUE
	periods_learn=5, 5;  if Nt_learn[0]< i <Nt_learn[1], learn every 5 times, etc... THIS MUST BE OF size=Nt_learn.size()-1

	# ---------------- Controls for the MALA  -----------------
	use_drift=0;  When 0, use the MH scheme instead of the MALA scheme
	delta=0;  This parameter is only for the MALA algorithm (ie, when the gradient is available). For a RWM, set to 0...
	delta_x=1e-10;  Boundary for the MALA... not used for the RWM mode
 
 	# ----------- Controls for the parallel tempering ---------
 	Nchains=6;   Number of parallel chains
	dN_mixing=5.;  Perform a chain mixing (parallel tempering) every dN_mixing
 	lambda_temp=1.8; value should always be adjusted so that Tmax>120

	# --------- Experimental extra parameters ----------
	# ------ These are not yet  fully implemented ------
	proposal_type=Random; Exact_on_grid does not yet exist // PARTLY IMPLEMENTED
	

!Modeling:

	# This section contains the required information to (1) compute 
	# the models, (2) calculate the likelihood and (3) calculate the priors
		
	model_fct_name=model_Test_Gaussian;; Name of the function that contains the model. Currently available: model_Test_Gaussian, model_Harvey_Gaussian
	prior_fct_name=prior_Test_Gaussian; Name of the function that contains the priors that should be applied to the model. Currently available: prior_Test_Gaussian, prior_Harvey_Gaussian
	likelihood_fct_name=chi_square; Name of the function that will calculate the likelihood. two choices: "chi_square" or "chi22p"
	
	likelihood_params=1; Parameters that could define the likelihood. e.g., in the case of a chi(2,2p) statistics (chi22p function), we need p

	cfg_model_file=/home/obenomar/Dropbox/Temporary/Cpp-Playground/Config/inputs/model_Test_Gaussian/Gaussian.model; Contains the initial guesses and the priors in an ASCII format. To each model_fct_name, a given format is expected. IT IS STRONGLY RECOMMENDED TO NAME YOUR FILE WITH THE SAME NAME AS THE PRIOR_FCT_NAME

!Data:
	# This section contains the information on the inputs data
	verbose_data=0; If set to 1, shows the data on the screen
    file_data=/home/obenomar/Dropbox/Temporary/Cpp-Playground/Config/inputs/model_Test_Gaussian/Gaussian.data; A two columns text file with the data
	x_col=0; // column that contains the x axis (if any). Set to -1 if irrelevant
	y_col=1; // column that contains the y axis (if any). Set to -1 if irrelevant
	ysig_col=-1;  // column that contains the uncertainty (if any). Set to -1 if irrelevant

!Outputs:
	# Section dedicated to the required inputs of the 
	# class Outputs (files output.cpp and output.h)

	Nsamples=150;  Number of computed samples
	Nbuffer=20000;

	erase_old_files=1;  if set to 0, it appends the existing files (if any exist)
	file_format=binary;  "text" or "binary". Alternatively, "debug" is to generate both type of files (to compare outputs from both files)

	#  -----------  Variables that decide which outputs we do write  ----------- 
	get_params=1;  if set to 1, save the parameters of the fitted model. This option might always be set to 1
	get_statcriteria=1;  if set to 1, save the statistical parameters (logLikelihood, logPrior, logPosterior, ...). Recommended to always set it to 1
	get_proposal_params=1;  if set to 1, save the proposal parameters (sigmas, mus, covarmats) of the parallel chains. Mostly for debug purpose.
	get_parallel_tempering=1; if set to 1, save the parallel tempering information (swaped chain, probability, ...)
	get_models=0;  if set to 1, save the models for all chains. WARNING: Might greatly slow-down the process and will take a HUGE amount of space

	#  -----------  Variables defining the output files. Do not write the filename full path and extension ----------- 
	output_root_name=;
	output_dir=/home/obenomar/Dropbox/Temporary/Cpp-Playground/Data/outputs/;
	params_txt_fileout=params; 
	proposal_txt_fileout=proposals; 
	parallel_tempering_txt_fileout= parallel_tempering; 
	model_txt_fileout= models;
	stat_txt_fileout= stat_criteria;
	acceptance_txt_fileout= acceptance;

	hdf5_fileout=;  When writing on hdf5, everything is in one single file: NOT YET IMPLEMENTED
	
	# Information required for the completion of an aborted run
	# The restore files contain (1) last position of all chains and the index of the last saved iteration, (2) mu and sigma, (3) last covariance matrix
	do_restore_last_index=0; Set this to 1 if you need to restart an Training phase which improperly stoped (do_restore_proposal and do_restore_variables might also be 1 in that case)
	do_restore_proposal=0; If set to 1, restore the proposal law (covariance matrix) of a previous run
	do_restore_variables=0; If set to 1, restore the last values for variables of a previous run

	restore_dir=/home/obenomar/Dropbox/Temporary/Cpp-Playground/Data/restore/; The directory where all files required to restore a run are put. 
	restore_file_in=restore_; The root name of the restored files. This is an input file of format: [restore_dir]/[output_root_name][restore_file][type of the file].dat (type_of_file = 1 or 2 or 3 and contain different informations: last values, covariance matrix, etc...) 
	restore_file_out=restore_; Same as restore_file_in, but this is the name for output files

!Diagnostics:
	# Section related to all means to diagnose/look at the processes
	# in near-real time. All refresh rate are fixed by Outputs.Nbuffer

	# -------------- Variables defining the used activated real time processes --------------
	chains_diags=1; If set to 1, generates plots for the acceptance rate and for the likelihoods of all chains 
	evidence_diags=0; If set to 1, evaluates the evidence and shows it on a plot NOT YET IMPLEMENTED
	pdfs_diags=1; If set to 1, generate the pdfs of the samples for all fitted parameters

	model_initial_diags=1; If set to 1, generates a plot which shows the model on top of data at the first iteration
	model_buffer_diags=0; If set to 1, generates a plot which shows the model on top of data, averaged over Nsamples=Nbuffer (and indexed by Ncopy)
	model_final_diags=1; If set to 1, generates a plot which shows the model on top of data at the end of the analysis

	# -------------- Names of the output directories and output files ----------------
	#For files, the extension is not necessary
	output_root_name=; E.G. the KIC number and/or calculation phase
	output_dir=/home/obenomar/Dropbox/Temporary/Cpp-Playground/Data/diags/; Main directory for the diagnostics

	file_chains_diags=acceptance;
	file_evidence_diags=evidence; NOT YET IMPLEMENTED
	file_pdfs_diags=pdfs_plots; 
	file_model_init_diags=model_init; 
	file_model_buffer_diags=model_buffer; 
	file_model_final_diags=model_final; 

	# --------  Miscellaneous control variables for the plots --------
	# When the model_*_diags are set to 1, it is possible to show a smooth of the data. Two level of smooth can be overploted
	# data_scoef1 and data_scoef2. Note that these coefficient should be in the same unit as the x-axis of the data (e.g. microHz or seconds)
	data_scoef1=0.2; 
	data_scoef2=1; 

	# When the pdfs_diags is set to 1, histograms are created. It is required to set the number of classes for those histograms
	Nclasses=200; Number of classes for the histograms

/END;

